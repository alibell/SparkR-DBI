name: test_and_publish
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  create:
    tags:
      - "v*"
permissions:
  contents: read
jobs:
  test:
    runs-on: ubuntu-latest
    name: ${{ matrix.config.name }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {spark: '3.3.0', hadoop: '3', r: 'release', java: '11', name: 'Spark 3.3'}
          - {spark: '3.2.2', hadoop: '3.2', r: 'release', java: '11', name: 'Spark 3.2'}
          - {spark: '3.1.3', hadoop: '3.2', r: 'release', java: '11', name: 'Spark 3.1'}
          - {spark: '2.4.0', hadoop: '2.7', r: '3.5.1', java: '8', name: 'Spark 2.4'}
          - {spark: '2.2.1', hadoop: '2.7', r: '3.5.1', java: '8', name: 'Spark 2.2'}
    steps:
      - uses: actions/checkout@v2
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: ${{ matrix.config.r }}
          use-public-rspm: true
      - uses: actions/setup-python@v2
        with:
          python-version: '3.8'
      - uses: actions/setup-java@v1
        with:
          java-version: ${{ matrix.config.java }}
      - uses: vemonet/setup-spark@v1
        with:
          spark-version: ${{ matrix.config.spark }}
          hadoop-version: ${{ matrix.config.hadoop }}
      - uses: r-lib/actions/setup-r-dependencies@v2
        with:
          cache: true
          need: true
          pak-version: devel
          extra-packages: |
            any::devtools
            any:desc
            SparkR=?ignore
      - name: Installating SparkR
        run: |
          R CMD INSTALL $SPARK_HOME/R/lib/SparkR
      - name: Running test
        run: |
          devtools::load_all()
          devtools::test(reporter=c("progress", "fail"))
        shell: Rscript {0}
  publish:
    needs: [test]
    if: ${{ github.event_name == 'create' }}
    name: Generating release
    steps:
      - uses: actions/checkout@v2
      - name: Set last version number as environment variable
        run: |
          CURRENT_VERSION=$(R --slave -e "cat(as.character(desc::desc('./DESCRIPTION')\$get_version()))")
          echo "RELEASE_VERSION=${GITHUB_REF#refs/*/}" >> $GITHUB_ENV
      - name: Create release
        if: {{ env.RELEASE_VERSION == github.ref_name }}
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false